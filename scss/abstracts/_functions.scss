// -----------------------------------------------------------------------------
  // Functions
// -----------------------------------------------------------------------------

////
/// @author Steve Jackson
/// @group abstracts
////

/// Native `url(..)` function wrapper
/// @param {String} $path - asset path
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $base - base URL for the asset
/// @return {Url}
/// @require $base-url
@function asset($path, $type, $base: $base-url) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

/// Returns size calculation
/// @param {Number} $scale
/// @param {Number} $base
/// @param {Number} $value
/// @return {Number}
/// @require $scale
@function size-calc($scale, $base, $value) {
  @return ($scale/$base) + $value;
}

/// Returns size calculation
/// @param {Number} $scale
/// @param {Number} $measure
/// @param {Number} $value
/// @return {Number}
/// @require $scale
@function margin-calc($scale, $measure, $value) {
  $pixelValue: $scale/$measure;
  $remValue: $pixelValue * $typography-font-base;

  @if $value == rem {
    @return $pixelValue + $value;
  } @else if $value == em {
    @return ($remValue/$scale) + $value;
  } @else {
    @return $remValue * 1px;
  }
}

@function color-light-alpha($alpha) {
  @return rgba(255,255,255,$alpha);
}

@function color-dark-alpha($alpha) {
  @return rgba(0,0,0,$alpha);
}

/// Returns an appropriate color to contrast the
/// @param {String} $sourceColor - Color to be compared against
/// @param {String} $inverted - Reverse the outcome
/// @return {String}
/// @require $sourceColor
@function color-contrast($sourceColor, $inverted: false) {
  $light: $color-lightest;
  $dark: $color-dark;
  @if $inverted {
    $light: $color-dark;
    $dark: $color-lightest;
  }
  $color-brightness: round((red($sourceColor) * 299) + (green($sourceColor) * 587) + (blue($sourceColor) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2){
    @return $light;
  }

  @return $dark;
}
